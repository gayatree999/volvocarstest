var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ViteServiceLauncher_options, _ViteServiceLauncher_config, _ViteServiceLauncher_server;
import logger from '@wdio/logger';
import getPort from 'get-port';
import { createServer, loadConfigFromFile } from 'vite';
import { SevereServiceError } from 'webdriverio';
import { pkg } from './constants.js';
const log = logger('wdio-vite-service');
export class ViteServiceLauncher {
    constructor(options, _, config) {
        _ViteServiceLauncher_options.set(this, void 0);
        _ViteServiceLauncher_config.set(this, void 0);
        _ViteServiceLauncher_server.set(this, void 0);
        log.info(`Initiate Vite Service (v${pkg.version})`);
        __classPrivateFieldSet(this, _ViteServiceLauncher_config, config, "f");
        __classPrivateFieldSet(this, _ViteServiceLauncher_options, {
            configFile: 'vite.config.ts',
            configRoot: process.cwd(),
            mode: 'development',
            logLevel: 'info',
            ...options
        }, "f");
    }
    async onPrepare(config) {
        const port = await getPort();
        const configEnv = {
            command: 'serve',
            mode: __classPrivateFieldGet(this, _ViteServiceLauncher_options, "f").mode
        };
        const viteConf = await loadConfigFromFile(configEnv, __classPrivateFieldGet(this, _ViteServiceLauncher_options, "f").configFile, __classPrivateFieldGet(this, _ViteServiceLauncher_options, "f").configRoot, __classPrivateFieldGet(this, _ViteServiceLauncher_options, "f").logLevel);
        if (!viteConf) {
            throw new SevereServiceError(`Failed to load Vite config at ${__classPrivateFieldGet(this, _ViteServiceLauncher_options, "f").configFile}`);
        }
        if (!viteConf?.config.server?.port) {
            viteConf.config.server = {
                port,
                ...viteConf.config.server
            };
        }
        __classPrivateFieldSet(this, _ViteServiceLauncher_server, await createServer({
            configFile: viteConf?.path,
            root: __classPrivateFieldGet(this, _ViteServiceLauncher_options, "f").configRoot,
            ...viteConf?.config
        }), "f");
        process.env.WDIO_BASE_URL = `http://localhost:${__classPrivateFieldGet(this, _ViteServiceLauncher_server, "f").config.server.port}`;
        await __classPrivateFieldGet(this, _ViteServiceLauncher_server, "f").listen();
        log.info(`Vite server started on ${config.baseUrl}`);
    }
    async onComplete() {
        if (__classPrivateFieldGet(this, _ViteServiceLauncher_server, "f")) {
            await __classPrivateFieldGet(this, _ViteServiceLauncher_server, "f").close();
        }
    }
}
_ViteServiceLauncher_options = new WeakMap(), _ViteServiceLauncher_config = new WeakMap(), _ViteServiceLauncher_server = new WeakMap();
//# sourceMappingURL=launcher.js.map